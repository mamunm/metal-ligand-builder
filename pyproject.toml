[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ml-xtb-prescreening"
version = "0.1.0"
description = "Enhanced metal-ligand complex generation with chemical intelligence and xTB screening"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Osman Mamun", email = "mamun.che06@gmail.com"},
]
keywords = [
    "computational chemistry",
    "metal complexes",
    "ligand binding",
    "xTB",
    "coordination chemistry",
    "drug discovery",
    "molecular modeling"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]

dependencies = [
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "tqdm>=4.62.0",
    "rich>=14.0.0",
    "rdkit>=2025.3.2",
]

[project.optional-dependencies]
visualization = [
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "black",
    "ruff",
    "mypy",
]
all = [
    "ml-xtb-prescreening[visualization,dev]",
]

[project.scripts]
ml-xtb-prescreening = "ml_xtb_prescreening.main:main"

[project.urls]
Homepage = "https://github.com/osmanmamun/ml-xtb-prescreening"
Documentation = "https://github.com/osmanmamun/ml-xtb-prescreening#readme"
Issues = "https://github.com/osmanmamun/ml-xtb-prescreening/issues"

[tool.hatch.build.targets.sdist]
include = [
    "/ml_xtb_prescreening",
    "/experiments",
    "/tests",
    "README_enhanced.md",
    "LICENSE",
    "QUICKSTART.md",
]

[tool.hatch.build.targets.wheel]
packages = ["ml_xtb_prescreening"]

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.isort]
known-first-party = ["ml_xtb_prescreening"]

[tool.black]
target-version = ["py38", "py39", "py310", "py311", "py312"]
line-length = 100

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests", "ml_xtb_prescreening/test_modules.py"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--verbose --cov=ml_xtb_prescreening --cov-report=html --cov-report=term"

[tool.coverage.run]
source = ["ml_xtb_prescreening"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
